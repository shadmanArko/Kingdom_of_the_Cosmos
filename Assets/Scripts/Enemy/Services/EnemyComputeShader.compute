#pragma kernel CSMain

struct Enemy
{
    float2 position;
    float2 velocity;
    float stuckness;
    float damage;
    float distanceToPlayer;
    float minDistance;    // Minimum distance to maintain from player
    int isAlive;
};

// Buffers
RWStructuredBuffer<Enemy> enemyBuffer;
StructuredBuffer<float2> obstacleBuffer;

// Parameters
float2 playerPosition;
float deltaTime;
float moveSpeed;
float obstacleAvoidanceRadius;
float neighborAvoidanceRadius;
int enemyCount;
int obstacleCount;
float stucknessThreshold;

[numthreads(256, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;

    // Check if this thread should process an enemy
    if (index >= (uint)enemyCount)
        return;

    Enemy enemy = enemyBuffer[index];

    // Skip processing dead enemies
    if (enemy.isAlive == 0)
    {
        enemyBuffer[index] = enemy;
        return;
    }

    // Calculate direction and distance to player
    float2 dirToPlayer = playerPosition - enemy.position;
    float distToPlayer = length(dirToPlayer);
    enemy.distanceToPlayer = distToPlayer;
    
    // Determine movement direction
    float2 normalizedDirToPlayer = float2(0, 0);
    
    // Track back when player approaches
    if (distToPlayer <= enemy.minDistance * 1.5f)
    {
        // Move away from player when too close
        normalizedDirToPlayer = -normalize(dirToPlayer);
    }
    else if (distToPlayer > enemy.minDistance)
    {
        if (distToPlayer > 0.001f)
        {
            normalizedDirToPlayer = normalize(dirToPlayer);
        }
        else
        {
            // Random direction when extremely close
            normalizedDirToPlayer = float2(sin(enemy.position.x * 1000), cos(enemy.position.y * 1000));
        }
    }
    
    // Calculate obstacle avoidance
    float2 avoidanceForce = float2(0, 0);
    for (int i = 0; i < obstacleCount; i++)
    {
        float2 toObstacle = enemy.position - obstacleBuffer[i];
        float distance = length(toObstacle);
        
        if (distance > 0.001f && distance < obstacleAvoidanceRadius)
        {
            avoidanceForce += toObstacle / (distance * distance);
        }
    }
    
    // Calculate separation from other enemies
    float2 separationForce = float2(0, 0);
    int neighborCount = 0;
    
    for (int i = 0; i < enemyCount; i++)
    {
        if (i == index) continue;
        
        float2 toNeighbor = enemy.position - enemyBuffer[i].position;
        float distance = length(toNeighbor);
        
        if (distance > 0.001f && distance < neighborAvoidanceRadius)
        {
            // Lighter separation when close to player
            if (distToPlayer <= enemy.minDistance * 1.5f)
            {
                // Reduced separation to prevent pushing towards player
                separationForce += normalize(toNeighbor) * (1.0 / (distance * 2.0));
            }
            else
            {
                // Normal separation for other cases
                separationForce += normalize(toNeighbor) / distance;
            }
            neighborCount++;
        }
    }
    
    // Normalize separation force if there are neighbors
    if (neighborCount > 0)
    {
        separationForce = normalize(separationForce) * 1.2;
    }
    
    // Calculate distance-based speed multiplier
    float distanceMultiplier = 1.0;
    if (distToPlayer <= enemy.minDistance)
    {
        // Reduce speed when too close to player
        distanceMultiplier = 0.5;
    }
    
    // Combine all forces to get final movement direction
    float2 finalDirection = normalizedDirToPlayer + avoidanceForce + separationForce;
    float finalMagnitude = length(finalDirection);
    
    // Normalize final direction
    if (finalMagnitude > 0.001f)
    {
        finalDirection /= finalMagnitude;
    }
    else
    {
        finalDirection = float2(sin(enemy.position.x * 1000), cos(enemy.position.y * 1000));
    }
    
    // Update stuckness
    float totalForce = length(avoidanceForce) + length(separationForce);
    enemy.stuckness = clamp(enemy.stuckness + (totalForce > stucknessThreshold ? deltaTime : -deltaTime), 0, 1);

    // Calculate final movement
    float stucknessMultiplier = 1 - enemy.stuckness;
    float speed = max(moveSpeed * 0.5f, moveSpeed * finalMagnitude) * stucknessMultiplier * distanceMultiplier;
    
    // Update position
    enemy.position += finalDirection * speed * deltaTime;
    
    // Write back to buffer
    enemyBuffer[index] = enemy;
}
// Shared structure definition
struct Node
{
    int2 position;
    float gCost;
    float hCost;
    float fCost;
    int parentIndex;
    bool isWalkable;
    bool isOpen;    // Add this to track open set
    bool isClosed;  // Add this to track closed set
};

// Shared buffer definitions
RWStructuredBuffer<Node> nodes;
RWStructuredBuffer<int2> pathRequests;
RWStructuredBuffer<int> pathResults;
RWStructuredBuffer<int2> walkabilityUpdates;

// Shared variables
int2 gridSize;
int numPathRequests;
bool canMoveDiagonally;
int numWalkabilityUpdates;

// Shared functions
int GetIndex(int2 pos)
{
    return pos.y * gridSize.x + pos.x;
}

float GetDistance(int2 a, int2 b)
{
    int2 distance = abs(a - b);
    int diagonal = min(distance.x, distance.y);
    int straight = abs(distance.x - distance.y);
    return diagonal * 14 + straight * 10;
}

#pragma kernel InitializeNodes
[numthreads(64,1,1)]
void InitializeNodes (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)(gridSize.x * gridSize.y)) return;
    
    int2 pos = int2(id.x % gridSize.x, id.x / gridSize.x);
    nodes[id.x].position = pos;
    nodes[id.x].isWalkable = true; // You may want to initialize this based on your map data
    nodes[id.x].gCost = 1.#INF;
    nodes[id.x].hCost = 1.#INF;
    nodes[id.x].fCost = 1.#INF;
    nodes[id.x].parentIndex = -1;
}

#pragma kernel UpdateNodeWalkability
[numthreads(64,1,1)]
void UpdateNodeWalkability (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)numWalkabilityUpdates) return;
    
    int2 pos = walkabilityUpdates[id.x];
    int index = pos.y * gridSize.x + pos.x;
    
    if (index >= 0 && index < gridSize.x * gridSize.y)
    {
        nodes[index].isWalkable = !nodes[index].isWalkable; // Toggle walkability
    }
}

#pragma kernel FindPath
[numthreads(64,1,1)]
void FindPath(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)numPathRequests) return;

    int2 startPos = pathRequests[id.x * 2];
    int2 goalPos = pathRequests[id.x * 2 + 1];
    
    int startIndex = GetIndex(startPos);
    int goalIndex = GetIndex(goalPos);
    
    // Reset all nodes for this pathfinding instance
    for (int i = 0; i < gridSize.x * gridSize.y; i++)
    {
        nodes[i].gCost = 1.#INF;
        nodes[i].hCost = 1.#INF;
        nodes[i].fCost = 1.#INF;
        nodes[i].parentIndex = -1;
        nodes[i].isOpen = false;
        nodes[i].isClosed = false;
    }

    // Initialize start node
    nodes[startIndex].gCost = 0;
    nodes[startIndex].hCost = GetDistance(startPos, goalPos);
    nodes[startIndex].fCost = nodes[startIndex].hCost;
    nodes[startIndex].isOpen = true;

    bool pathFound = false;
    const int maxIterations = 1000;
    int iterations = 0;

    while (iterations < maxIterations)
    {
        iterations++;
        
        // Find current node (lowest fCost in open set)
        int currentIndex = -1;
        float lowestFCost = 1.#INF;
        
        for (int i = 0; i < gridSize.x * gridSize.y; i++)
        {
            if (nodes[i].isOpen && nodes[i].fCost < lowestFCost)
            {
                lowestFCost = nodes[i].fCost;
                currentIndex = i;
            }
        }
        
        if (currentIndex == -1 || currentIndex == goalIndex)
        {
            pathFound = (currentIndex == goalIndex);
            break;
        }

        // Move current node from open to closed set
        nodes[currentIndex].isOpen = false;
        nodes[currentIndex].isClosed = true;
        
        // Process neighbors
        int2 currentPos = nodes[currentIndex].position;
        
        for (int y = -1; y <= 1; y++)
        {
            for (int x = -1; x <= 1; x++)
            {
                if (x == 0 && y == 0) continue;
                if (!canMoveDiagonally && x != 0 && y != 0) continue;
                
                int2 neighborPos = currentPos + int2(x, y);
                
                // Check bounds
                if (neighborPos.x < 0 || neighborPos.x >= gridSize.x ||
                    neighborPos.y < 0 || neighborPos.y >= gridSize.y)
                    continue;
                
                int neighborIndex = GetIndex(neighborPos);
                
                // Skip if not walkable or in closed set
                if (!nodes[neighborIndex].isWalkable || nodes[neighborIndex].isClosed)
                    continue;

                // Calculate new path cost
                float moveCost = (abs(x) + abs(y) == 1) ? 10 : 14; // 10 for orthogonal, 14 for diagonal
                float newGCost = nodes[currentIndex].gCost + moveCost;
                
                if (!nodes[neighborIndex].isOpen || newGCost < nodes[neighborIndex].gCost)
                {
                    nodes[neighborIndex].gCost = newGCost;
                    nodes[neighborIndex].hCost = GetDistance(neighborPos, goalPos);
                    nodes[neighborIndex].fCost = newGCost + nodes[neighborIndex].hCost;
                    nodes[neighborIndex].parentIndex = currentIndex;
                    nodes[neighborIndex].isOpen = true;
                }
            }
        }
    }

    // Reconstruct path if found
    if (pathFound)
    {
        int pathLength = 0;
        int currentPathIndex = goalIndex;
        int resultIndex = id.x * gridSize.x * gridSize.y;
        
        while (currentPathIndex != startIndex && pathLength < gridSize.x * gridSize.y)
        {
            pathResults[resultIndex + pathLength + 1] = currentPathIndex;
            currentPathIndex = nodes[currentPathIndex].parentIndex;
            pathLength++;
        }
        
        pathResults[resultIndex + pathLength + 1] = startIndex;
        pathResults[id.x] = pathLength + 1;
    }
    else
    {
        pathResults[id.x] = 0; // No path found
    }
}
